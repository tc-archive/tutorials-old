%%%----------------------------------------------------------------------------
%%% @author Temple
%%% @copyright (C) 2014, <COMPANY>
%%% @doc
%%%
%%% @end
%%% Created : 12. Sep 2014 07:09
%%%----------------------------------------------------------------------------
-module(sws).


%%%============================================================================
%% Public API
%%%============================================================================

-export([
	start/0,
	start/1
]).

-export([
	init/3,
	handle/2,
	terminate/3
]).


%%%============================================================================
%% Public API Implementation
%%%============================================================================

%%-----------------------------------------------------------------------------
%% @doc
%%
%% @end
%%-----------------------------------------------------------------------------
start() ->
	start(8877).

%%-----------------------------------------------------------------------------
%% @doc
%%
%% @end
%%-----------------------------------------------------------------------------
start(Port) ->

	ok = application:start(crypto),
	ok = application:start(ranch),
	ok = application:start(cowboy),

	N_acceptors = 10,

	Dispatch = cowboy_router:compile([
		%% {URIHost, list({URIPath, Handler, Opts})}
		{'_', [{'_', simple_web_server, []}]}
		]),

	cowboy:start_http(
		my_simple_web_server,
		N_acceptors,
		[{port, Port}],
		[{env, [{dispatch, Dispatch}]}]
	).


%%%============================================================================
%%% Callback API Implementation
%%%============================================================================

%%% The module names given in the dispatcher patterns must provide three
%%% callback routines: init/3, handle/3, and terminate/2.

%%-----------------------------------------------------------------------------
%% @doc
%%
%% @end
%%-----------------------------------------------------------------------------
init({tcp, http}, Req, _Opts) ->
	{ok, Req, undefined}.


%%-----------------------------------------------------------------------------
%% @doc
%%
%% @end
%%-----------------------------------------------------------------------------
handle(Req, State) ->
	{Path, Req1} = cowboy_req:path(Req),
	Response = read_file(Path),
	{ok, Req2} = cowboy_req:reply(200, [], Response, Req1),
	{ok, Req2, State}.


%%-----------------------------------------------------------------------------
%% @doc
%%
%% @end
%%-----------------------------------------------------------------------------
terminate(_Reason, _Req, _State) ->
	ok.


%%%============================================================================
%%% Private
%%%============================================================================

%%-----------------------------------------------------------------------------
%% @doc
%%
%% @end
%%-----------------------------------------------------------------------------
read_file(Path) ->
	File = ["."|binary_to_list(Path)],
	case file:read_file(File) of
		{ok, Bin} ->
			Bin;
		_ ->
			["<pre>cannot read:", File, "</pre>"]
	end.




