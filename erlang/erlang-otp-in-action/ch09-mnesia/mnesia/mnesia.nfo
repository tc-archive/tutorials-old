
# =============================================================================
# Setting up an Mnesia Database in Erlang
#
# During the course of creating this database, you’ll do the following:
#
# - Initialize Mnesia
# - Start your node
# - Create a schema
# - Start Mnesia
# - Create database tables
# - Populate the tables you’ve created
# - Perform some basic queries on the data


# =============================================================================
# Initialise the Mnesia Database
#
# Tells Mnesia to store its data in the specified directory. (Note the single 
# quotes needed on the command line in order to preserve the double quotes 
# around the string.) You also tell Erlang to start in distributed mode, using 
# the –name option, so you can begin working with replication in Mnesia right 
# away.
#
erl -mnesia dir '"/tmp/mnesia_store"' -name mynode

# Erlang/OTP 17 [erts-6.1] [source] [64-bit] [smp:8:8] [async-threads:10] [hipe] [kernel-poll:false] [dtrace]

# Eshell V6.1  (abort with ^G)
# (mynode@plato.config)1> 


# =============================================================================
# Create Mnesia Database Schems
#
# -record(user, {name }).
# -record(project, {title, description}).
# -record(contributor, {user_id, title }).

# Only create the schema on your local node. If the command was successful, 
# you now have an empty schema on your node. The command can fail if one of the 
# nodes in the list can’t be contacted, if Mnesia is already running on one 
# of the nodes, or if there is a previously existing schema on one of them. 
# (In the last case, you can use the function mnesia:delete_schema (Nodes) to 
# purge the old schema—but think twice before you do this: it makes any 
# existing tables unreadable.)
#
# (mynode@plato.config)1> mnesia:create_schema([node()]).
# ok
# (mynode@plato.config)2>


# =============================================================================
# Start Mnesia Database
#
# Run 'mnesia:start().' and 'mnesia:info().'.
#
# (mynode@plato.config)2> mnesia:start().
# ok
# (mynode@plato.config)4> mnesia:info().
# ---> Processes holding locks <---
# ---> Processes waiting for locks <---
# ---> Participant transactions <---
# ---> Coordinator transactions <---
# ---> Uncertain transactions <---
# ---> Active tables <---
# schema         : with 1        records occupying 412      words of mem
# ===> System info in version "4.12.1", debug level = none <===
# opt_disc. Directory "/tmp/mnesia_store" is used.
# use fallback at restart = false
# running db nodes   = ['mynode@plato.config']
# stopped db nodes   = []
# master node tables = []
# remote             = []
# ram_copies         = []
# disc_copies        = [schema]
# disc_only_copies   = []
# [{'mynode@plato.config',disc_copies}] = [schema]
# 2 transactions committed, 0 aborted, 0 restarted, 0 logged to disc
# 0 held locks, 0 in queue; 0 local transactions, 0 remote
# 0 transactions waits for other nodes: []
# ok
# (mynode@plato.config)5>





# =============================================================================
# Create Datbase Tables
#
# Mnesia tables store Erlang terms and record.
#
# record(user, {id, name }).
# mnesia:create_table(
#   user, [{attributes, record_info(fields, user)}]
#   ),
#
# record(project, {title, description}).
# mnesia:create_table(
#   project,[{attributes, record_info(fields, project)}]
#   ),
#
# record(contributor, {user_id, project_title}).
# mnesia:create_table(
#   contributor, [{type, bag}, {attributes, record_info(fields, contributor)}]
#   ).
#
#
#
# Default 'attributes'
#
# Only specifying the attributes option means that the table will get the default 
# settings for all other options. These are as follows:
#
# - The table is both readable and writeable.
# - The table is stored in RAM only (the storage type is ram_copies).
# - The records stored in the table must have the same name as the table.
# - The table type is set, which means there can be no more than one entry
#   per key.
# - The load priority is 0 (the lowest).
# - The local_content flag is set to false.
#
#
# Mnesia Table Types
#
# - 'set'         : Treats keys as unique—  if you insert a record with the same 
#                   primary key as an existing entry, the new record overwrites
#                   the old.
#
# - 'ordered_set' : Behaves the same as a set; but whereas sets and bags are 
#                   implemented using hash tables, an ordered_set keeps all the 
#                   records stored in the order of their primary keys.
#
# - 'bag'         : Can contain multiple records with the same key, as long as 
#                   they differ in at least one field—inserting the exact same 
#                   record twice has no effect.
#
# 
# Mnesia Storage Types
#
# 'ram_copies'        : Data stored in memory only.
#
# 'disc_copies'       : Data stored in memory with a copay on disk.
#
# 'disc_only_copies'  : Data is store don disk only.
#



# Example
#
# $> rm -Rf /tmp/mnesia_store
# $> erl -mnesia dir '"/tmp/mnesia_store"' -name mynode
# Erlang/OTP 17 [erts-6.1] [source] [64-bit] [smp:8:8] [async-threads:10] [hipe] [kernel-poll:false] [dtrace]
#
# Eshell V6.1  (abort with ^G)
# (mynode@plato.config)1> mnesia:create_schema([node()]).
# ok
# (mynode@plato.config)2> mnesia:start().
# ok
# (mynode@plato.config)3> create_tables:init_tables().
# {atomic,ok}
# (mynode@plato.config)4> mnesia:info().
# ---> Processes holding locks <---
# ---> Processes waiting for locks <---
# ---> Participant transactions <---
# ---> Coordinator transactions <---
# ---> Uncertain transactions <---
# ---> Active tables <---
# contributor    : with 0        records occupying 305      words of mem
# project        : with 0        records occupying 305      words of mem
# user           : with 0        records occupying 305      words of mem
# schema         : with 4        records occupying 763      words of mem
# ===> System info in version "4.12.1", debug level = none <===
# opt_disc. Directory "/tmp/mnesia_store" is used.
# use fallback at restart = false
# running db nodes   = ['mynode@plato.config']
# stopped db nodes   = []
# master node tables = []
# remote             = []
# ram_copies         = [contributor,project,user]
# disc_copies        = [schema]
# disc_only_copies   = []
# [{'mynode@plato.config',disc_copies}] = [schema]
# [{'mynode@plato.config',ram_copies}] = [user,project,contributor]
# 5 transactions committed, 0 aborted, 0 restarted, 6 logged to disc
# 0 held locks, 0 in queue; 0 local transactions, 0 remote
# 0 transactions waits for other nodes: []
# ok
# (mynode@plato.config)5>








